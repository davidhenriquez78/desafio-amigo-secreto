// El principal objetivo de este desaf칤o es fortalecer tus habilidades en l칩gica de programaci칩n. Aqu칤 deber치s desarrollar la l칩gica para resolver el problema.

// Array para almacenar los nombres de los amigos
let listaDeAmigos = [];

/* / Funci칩n para validar la entrada del usuario
function validarEntrada(nombre) {
    if (!nombre || !isNaN(nombre)) {
        alert("Por favor, escribe un nombre v치lido.");
        return false;
    }
    return true;
} 
*/
/*
// Funci칩n para validar la entrada del usuario

// Comprueba si el valor es inv치lido:
    // - Est치 vac칤o (null, undefined o string vac칤o)
    // - No es una cadena de texto (typeof nombre !== "string")
    // - Es un n칰mero (si pasa la validaci칩n anterior pero sigue siendo un n칰mero, ej:"123" lo detectamos con !isNaN(nombre))
function validarEntrada(nombre) {
    if (!nombre || typeof nombre !== "string" || !isNaN(nombre)) {
        alert("Por favor, escribe un nombre v치lido que no sea un n칰mero.");
        return false; // Si no cumple, la funci칩n devuelve false y detiene la validaci칩n
    }
    if (listaDeAmigos.includes(nombre)) {
        alert("Este nombre ya est치 en la lista. Por favor, escribe un nombre diferente.");
        return false; // Si el nombre est치 repetido, la funci칩n devuelve false
    }
    return true; // Si pasa todas las validaciones, devuelve true (es v치lido)
}
*/

// Funci칩n para validar la entrada del usuario

//^[a-zA-Z츼칄칈칍칔치칠칤칩칰침칌\s]+$: Es una expresi칩n regular que asegura que:
//Solo se acepten letras may칰sculas y min칰sculas (incluyendo tildes y la letra "침").
//Se permitan espacios (\s), para nombres con m치s de una palabra.
//No se acepten n칰meros ni caracteres especiales.
//El s칤mbolo ^ indica que la validaci칩n empieza al inicio del texto, y el $ que termina al final.

function validarEntrada(nombre) {
    const regexSoloTexto = /^[a-zA-Z츼칄칈칍칔치칠칤칩칰침칌\s]+$/;

    if (!nombre || !regexSoloTexto.test(nombre)) {
        alert("Por favor, escribe un nombre v치lido que no contenga n칰meros ni caracteres especiales.");
        return false;
    }

    if (listaDeAmigos.includes(nombre)) {
        alert("Este nombre ya est치 en la lista. Por favor, ingresa un nombre diferente.");
        return false;
    }

    return true;
}

//a침adir nombres de amigos a la lista
function agregarAmigo() {
    const inputAmigo = document.getElementById("amigo");
    const nombreAmigo = inputAmigo.value.trim(); // Obtiene el valor del campo de entrada, eliminando espacios al inicio y al final

    if (validarEntrada(nombreAmigo)) {
        listaDeAmigos.push(nombreAmigo);
        inputAmigo.value = ""; //limpia el campo texto
        visualizarLista();
    }
}

// Funci칩n para realizar el sorteo aleatorio
function sortearAmigo() {
    if (listaDeAmigos.length === 0) {
        alert("La lista est치 vac칤a. Agrega nombres antes de realizar el sorteo.");
        return;
    }

    const indiceAleatorio = Math.floor(Math.random() * listaDeAmigos.length);
    const amigoSeleccionado = listaDeAmigos[indiceAleatorio];

    const resultadoElemento = document.getElementById("resultado");
    resultadoElemento.innerHTML = ""; // Limpiar resultados anteriores

    const itemResultado = document.createElement("li");
    itemResultado.textContent = `游꿀 El amigo secreto es: ${amigoSeleccionado} 游꿀`;
    itemResultado.classList.add("highlight");
    resultadoElemento.appendChild(itemResultado);
}

// Funci칩n para mostrar la lista de amigos en la p치gina
function visualizarLista() {
    const listaAmigosElemento = document.getElementById("listaAmigos");
    listaAmigosElemento.innerHTML = ""; // Limpiar la lista actual

    //// Recorre el array `listaDeAmigos` y agrega cada nombre como un elemento de lista (<li>)
    listaDeAmigos.forEach((amigo, index) => {
        const item = document.createElement("li");  // Crea un elemento <li> para cada nombre
        item.textContent = amigo; //// Asigna el texto del nombre al contenido del <li>
        item.classList.add("name-item"); // Agrega una clase CSS al elemento <li> (opcional, para estilos)
        listaAmigosElemento.appendChild(item); // Agrega el <li> al elemento <ul> de la lista
    });
}

